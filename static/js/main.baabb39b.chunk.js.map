{"version":3,"sources":["redux/actions.js","components/Chakra.js","components/ChakraContainer.js","components/WelcomeForm.js","components/Welcome.js","components/Nav.js","components/QuizResults.js","components/QuizForm.js","components/QuizContainer.js","components/Yoga.js","components/YogaContainer.js","components/Advice.js","components/AdviceContainer.js","App.js","serviceWorker.js","redux/userReducer.js","redux/questionReducer.js","redux/chakraReducer.js","redux/poseReducer.js","redux/adviceReducer.js","index.js","logo.svg"],"names":["getAllQuestions","dispatch","fetch","then","resp","json","arrayOfQuestions","setQuestions","addUserBE","name","console","log","method","headers","body","JSON","stringify","user","addUser","newUser","type","payload","setChakras","arrayOfChakras","setPoses","arrayOfPoses","setChakra","singleChakra","setAdvice","arrayOfAdvice","connect","getSingleChakra","id","chakra","src","symbol","className","description","ChakraContainer","this","props","getAllChakras","chakras","map","key","React","Component","state","allChakras","poses","allPoses","mode","WelcomeForm","handleChange","evt","setState","target","value","handleSubmit","preventDefault","history","push","onSubmit","htmlFor","onChange","autoComplete","mapDispatchToProps","users","withRouter","Welcome","Nav","to","QuizResults","handleClick","e","chart","selected","_index","parseInt","style","height","width","data","options","title","display","text","fontSize","onClick","legend","position","QuizForm","question","QuizContainer","done","answer","chartData","labels","datasets","backgroundColor","some","questions","answers","response","ans","root","slice","rootAvg","reduce","prev","curr","length","sacral","sacralAvg","p","c","solarP","solarAvg","heart","heartAvg","throat","throatAvg","thirdEye","thirdEyeAvg","crown","allAns","barPercentage","barThickness","maxBarThickness","minBarLength","hoverBackgroundColor","form","currentUser","allQuestions","Yoga","color","pose","sanskrit_name","image","alt","YogaContainer","getAllPoses","Advice","checked","advice","AdviceContainer","getAllAdvice","allAdvice","App","exact","path","render","removeUser","component","Boolean","window","location","hostname","match","initialState","userReducer","action","questionReducer","chakraReducer","poseReducer","adviceReducer","rootReducer","combineReducers","questionsReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.baabb39b.chunk.js","sourcesContent":["\nexport const getAllChakras = () => {\n  return (dispatch) => {\n    fetch(`http://localhost:3000/chakras`, {mode: 'cors'})\n      .then(resp => resp.json())\n      .then(arrayOfChakras => {\n        dispatch(setChakras(arrayOfChakras))\n      })\n  }\n}\n\nexport const getSingleChakra = (id) => {\n  return (dispatch) => {\n    fetch(`http://localhost:3000/chakras/${id}`)\n      .then(resp => resp.json())\n      .then(singleChakra => {\n        dispatch(setChakra(singleChakra))\n      })\n  }\n}\n\nexport const getAllQuestions = () => {\n  return (dispatch) => {\n    fetch(`http://localhost:3000/questions`)\n    .then(resp => resp.json())\n    .then(arrayOfQuestions => {\n      dispatch(setQuestions(arrayOfQuestions))\n    })\n  } \n}\n\nexport const getAllPoses = () => {\n  return (dispatch) => {\n    fetch(`http://localhost:3000/poses`)\n    .then(resp => resp.json())\n    .then(arrayOfPoses => {\n      dispatch(setPoses(arrayOfPoses))\n    })\n  } \n}\n\nexport const getAllAdvice = () => {\n  return (dispatch) => {\n    fetch(`http://localhost:3000/advices`)\n      .then(resp => resp.json())\n      .then(arrayOfAdvice => {\n        dispatch(setAdvice(arrayOfAdvice))\n      })\n  }\n}\n\nexport const addUserBE = (name) => {\n  console.log(\"from addUserBE\", name)\n  return (dispatch) => {\n    fetch('http://localhost:3000/users',{\n           method:'POST',\n           headers: { \n               'Content-type': 'application/json',\n               'accept': 'application/json'\n           },\n          body: JSON.stringify({\n              name: name\n            })\n    })\n      .then(resp => resp.json())\n      .then(user => {\n      dispatch(addUser(user))\n    })\n  }\n}\n\n\n\n\n\nexport const addUser = (newUser) => {\n  return {\n      type: \"ADD_USER\",\n      payload: newUser\n    }\n}\n  \nexport const removeUser = () => {\n  return {\n    type: \"CLEAR_USER\"\n  }\n}\n\nexport const setChakras = (arrayOfChakras) => {\n  return {\n    type: \"SET_CHAKRAS\",\n    payload: arrayOfChakras\n\n  }\n}\n\nexport const setPoses = (arrayOfPoses) => {\n  return {\n    type: \"SET_POSES\",\n    payload: arrayOfPoses\n  }\n}\n\nexport const setChakra = (singleChakra) => {\n  return {\n    type: \"SET_CHAKRA\",\n    payload: singleChakra\n\n  }\n}\n\nexport const setQuestions = (arrayOfQuestions) => {\n  return {\n    type: \"SET_QUESTIONS\",\n    payload: arrayOfQuestions\n  }\n}\n\nexport const setAdvice = (arrayOfAdvice) => {\n  return {\n    type: \"SET_ADVICE\",\n    payload: arrayOfAdvice\n  }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getSingleChakra } from \"../redux/actions\"\n\nconst Chakra = ({ chakra }) => (\n    \n\n    <div>\n        <h4>Chakra: {chakra.name} </h4> <img src={chakra.symbol} className=\"App-logo\"></img> {chakra.description}\n    </div>\n)\n\n\nexport default connect(null, {getSingleChakra})(Chakra)\n","import React from 'react';\nimport Chakra from './Chakra';\nimport { connect } from 'react-redux';\nimport { getAllChakras } from \"../redux/actions\"\nimport { Link } from 'react-router-dom';\nimport { Route, Switch } from 'react-router'\n\n\nclass ChakraContainer extends React.Component{\n\n    componentDidMount() {\n        this.props.getAllChakras()\n    }\n    \n\n    render() {\n        return (\n        <div className=\"chakra\">\n            <h1>All Chakras</h1>\n            <div>\n                {this.props.chakras.map(chakra => <Chakra chakra={chakra} key={chakra.id} />)}\n            </div>\n        </div>\n        )}\n}\n\nconst getInfo = (state) => {\n    return {\n        chakras: state.allChakras.chakras,\n        poses: state.allPoses.poses\n    }\n}\n\n\nexport default connect(getInfo, { getAllChakras })(ChakraContainer)","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addUser, addUserBE } from '../redux/actions';\nimport { withRouter } from \"react-router\";\n\n\nclass WelcomeForm extends React.Component{\n\n    state = {\n        user: \"\"\n    }\n\n    handleChange = (evt) => {\n        this.setState({\n          [evt.target.name]: evt.target.value\n        })\n      }\n    \n    handleSubmit = (evt) => {\n        evt.preventDefault()\n        this.props.addUser(this.state)\n        this.props.addUserBE(this.state.user)\n        this.props.history.push(`/quiz`)\n      }\n    \n    \n    render() {\n        return (\n            <div>\n                <h1>Enter Your Name Below to Begin</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"user\">Your Name</label>\n                    <input\n                        onChange={this.handleChange}\n                        type=\"text\"\n                        name=\"user\"\n                        value={this.state.user}\n                        autoComplete=\"off\"\n                        id=\"user\"\n                    />\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            </div>\n        )\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        users: () => { dispatch(addUserBE) }\n    }\n}\n\n\n\nexport default connect(null, { addUserBE, addUser, mapDispatchToProps })(withRouter(WelcomeForm))","import React from 'react';\nimport WelcomeForm from './WelcomeForm.js';\n\nexport default class Welcome extends React.Component {\n    render() {\n        return (\n            <div>\n                Welcome to LotusLessons. Please enter your name below to start your quiz!\n                <WelcomeForm />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass Nav extends Component {\n    render() {\n        return (\n          <div className=\"\">\n            <Link to=\"/\">Home</Link>\n              |\n            <Link to=\"/chakras\">Chakra Info</Link>\n              |\n            <Link to=\"/Quiz\">Quiz</Link>\n              |\n            <Link to=\"/Yoga\">Yoga</Link>\n              |\n            <Link to=\"/Advice\">Advice</Link>\n          </div>\n        );\n      }\n}\n\nexport default Nav","import React from 'react';\nimport { Bar, Pie } from 'react-chartjs-2';\nimport { withRouter } from \"react-router\";\n\nclass QuizResults extends React.Component{\n\n\n  handleClick = (e, chart) => {\n      let selected = chart[\"0\"]._index\n      let id = parseInt(selected + 1)\n      this.props.history.push(`/chakras/${id}`)\n    }\n\n    render() {\n        return (\n            <div style={{height: 400, width: 500}} >\n            <Bar\n              data={this.props.data}\n              options={{\n                title: {\n                  display: true,\n                  text: 'Average Chakra Openness',\n                  fontSize: 20,\n                },\n                onClick: this.handleClick,\n                        legend:{\n                          display:false,\n                          position:'right'\n                        }\n                      }}\n                />\n\n                <Pie\n                    data={this.props.data}\n                    options={{\n                    title:{\n                    display:true,\n                    fontSize:20\n                    },\n                    onClick: this.handleClick,\n                    legend:{\n                    display:true,\n                    position:'right'\n                    }\n                    }} />\n                </div>\n            )\n        }\n}\n\nexport default withRouter(QuizResults)","import React from 'react';\n\n\nclass QuizForm extends React.Component {\n    \n    render() {\n        return (\n            <form id=\"quiz-form\" onSubmit={(evt) => this.props.handleSubmit(evt, this.state)}>\n                <label htmlFor=\"question\">{this.props.question.question}</label>\n                <input onChange={this.props.handleChange}\n                    type=\"radio\"\n                    name={this.props.question.id}\n                    value={0}\n                />\n                <input onChange={this.props.handleChange}\n                    type=\"radio\"\n                    name={this.props.question.id}\n                    value={25}\n                />\n                <input onChange={this.props.handleChange}\n                    type=\"radio\"\n                    name={this.props.question.id}\n                    value={50}\n                />\n                <input onChange={this.props.handleChange}\n                    type=\"radio\"\n                    name={this.props.question.id}\n                    value={75}\n                />\n                <input onChange={this.props.handleChange}\n                    type=\"radio\"\n                    name={this.props.question.id}\n                    value={100}\n                />\n                </form>\n        )\n    }\n\n}\n\n\nexport default QuizForm\n\n        // let copyQuestions = []\n        // let newCopy = copyQuestions.push(name)\n        // let copyAnswers = []\n        // copyAnswers.push(value)\n\n        // if (copyQuestions.length === 21) {\n        //     this.setState({\n        //         questions: [...this.state, newCopy],\n        //         answers: [...this.state, copyAnswers]\n        //     })\n        // }\n        // console.log(newCopy)\n        \n        // this.setState({\n        //     name: [...this.state.name, name]    \n        // })","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getAllQuestions } from '../redux/actions';\nimport QuizResults from \"./QuizResults\";\nimport QuizForm from \"./QuizForm\";\n\n\nclass QuizContainer extends React.Component{\n\n    componentDidMount() {\n        this.props.getAllQuestions()\n    }\n\n    state = {\n        done: false,\n        question: [],\n        answer: [],\n        chartData: {\n            labels: [],\n            datasets: [],\n            backgroundColor: []\n         }\n    }\n\n    handleChange = (evt) => {\n        let name = evt.target.name\n        let value = evt.target.value\n\n        if (!this.state.question.some(question => question === name)) {\n            this.setState({\n                question: [...this.state.question, name],\n                answer: [...this.state.answer, value]\n            })\n        }\n    }\n    \n\n    handleSubmit = (evt, state) => {\n        evt.preventDefault()\n        const questions = this.state.question\n        const answers = this.state.answer\n        fetch(`http://localhost:3000/questions/answers`, {\n            method: \"PATCH\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                answers: answers,\n                questions: questions\n            })\n          })\n            .then(response => response.json())\n            .then(response => {\n                let ans = response.map(question => question.answer)\n                let root = ans.slice(0, 3)\n                let rootAvg = root.reduce((prev, curr) => prev + curr, 0) / root.length\n                let sacral = ans.slice(3, 6)\n                let sacralAvg = sacral.reduce((p, c) => p + c, 0) / sacral.length\n                let solarP = ans.slice(6, 9)\n                let solarAvg = solarP.reduce((p, c) => p + c, 0) / solarP.length\n                let heart = ans.slice(9, 12)\n                let heartAvg = heart.reduce((p, c) => p + c, 0) / heart.length\n                let throat = ans.slice(12, 15)\n                let throatAvg = throat.reduce((p, c) => p + c, 0) / throat.length\n                let thirdEye = ans.slice(15, 18)\n                let thirdEyeAvg = thirdEye.reduce((p, c) => p + c, 0) / thirdEye.length\n                let crown = ans.slice(18, 21)\n                let crownAvg = crown.reduce((p, c) => p + c, 0) / crown.length\n                let allAns = [rootAvg, sacralAvg, solarAvg, heartAvg, throatAvg, thirdEyeAvg, crownAvg]\n\n                let chakras = [\"Root\", \"Sacral\", \"Solar Plexus\", \"Heart\", \"Throat\", \"Third Eye\", \"Crown\"]\n\n                this.setState({\n                    done: true,     \n                    chartData: {\n                        labels: chakras,\n                        datasets: [{\n                            data: allAns,\n                            barPercentage: 100,\n                            barThickness: 60,\n                            maxBarThickness: 100,\n                            minBarLength: 2,\n                            backgroundColor: [\n                                'rgba(207, 0, 15, 0.6)',\n                                'rgba(255, 165, 0, 0.6)',\n                                'rgba(249, 105, 14, 0.6)',\n                                'rgba(46, 204, 113, 0.6)',\n                                'rgba(25, 181, 254, 0.6)',\n                                'rgba(140, 20, 252, 0.6)',\n                                'rgba(102, 51, 153, 0.6)'\n                            ],\n                            hoverBackgroundColor: [\n                                'rgba(207, 0, 15, 1)',\n                                'rgba(255, 165, 0, 1)',\n                                'rgba(249, 105, 14, 1)',\n                                'rgba(46, 204, 113, 1)',\n                                'rgba(25, 181, 254, 1)',\n                                'rgba(140, 20, 252, 1)',\n                                'rgba(102, 51, 153, 1)'\n                            ]\n                        }]\n\n                    }\n                })\n            });\n        \n    }\n\n\n    render() {\n        return (\n            <div style={{position: \"relative\"}}>\n                <div>\n                    <h5>For each of the following statements choose on a scale of 1 - 5, one strongly disagree and 5 being strongly agree, and 3 being neutral. </h5>\n                    {!this.state.done? \n                     <div className=\"quiz\">\n                        <div > {this.props.questions.questions.map(question => <QuizForm question={question} key={question.id} handleSubmit={this.handleSubmit} handleChange={this.handleChange} />)}\n                        <input form=\"quiz-form\" type=\"submit\" value=\"Submit\" />\n                         </div>\n                     </div> \n                : \n                        <div className=\"quiz\">\n                            <div style={{ backgroundColor: \"#ffffff\" }} ><QuizResults data={this.state.chartData}/></div>\n            \n                        </div>}\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nconst getInfo = (state) => {\n    return {\n        user: state.currentUser.user,\n        questions: state.allQuestions\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        questions: () => { dispatch(getAllQuestions) }\n    }\n}\n\nexport default connect(getInfo, {getAllQuestions, mapDispatchToProps})(QuizContainer)\n","import React from 'react';\n\n\nclass Yoga extends React.Component{\n    \n    render() {\n        return (\n            <div>\n                <h3 style={{color: \"black\"}}> Name: {this.props.pose.name} | {this.props.pose.sanskrit_name} ✨ </h3>\n                <div> <img className=\"pic\" src={this.props.pose.image} alt=\"bye\"></img></div>\n            </div>\n        )\n    }\n}\n\nexport default Yoga","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getAllPoses } from \"../redux/actions\";\nimport Yoga from \"./Yoga\"\n\nclass YogaContainer extends React.Component{\n\n    componentDidMount() {\n        this.props.getAllPoses()\n    }\n    \n\n    render() {\n        return (\n        <div className=\"chakra\">\n            <h1>Yoga Poses To Help Balance Chakras 🌺</h1>\n                <div>\n                    {this.props.poses.map(pose => <Yoga pose={pose} key={pose.id} />)}\n            </div>\n        </div>\n        )}\n\n}\n\nconst getInfo = (state) => {\n    return {\n        poses: state.allPoses.poses\n    }\n}\n\nexport default connect(getInfo, { getAllPoses })(YogaContainer)","import React from 'react';\n\nclass Advice extends React.Component {\n\n    state = {\n        checked: false\n    }\n\n    handleClick = (e) => {\n\n        console.log(e.target.name)\n    }\n\n\n    render() {\n        return (\n            <ol>\n                <div> <img className=\"resize\" src={this.props.advice.chakra.symbol}></img>  {this.props.advice.advice}\n                    <input type=\"checkbox\" name={this.props.advice.id} value={this.props.advice.done} onClick={(e) => this.handleClick(e)}></input>\n                <br></br>\n                </div>\n            </ol>\n\n        )\n    }\n}\nexport default Advice","import React from 'react';\nimport Advice from \"./Advice\";\nimport { connect } from 'react-redux';\nimport { getAllAdvice } from \"../redux/actions\";\n\nclass AdviceContainer extends React.Component{\n\n    componentDidMount() {\n        this.props.getAllAdvice()\n    }\n\n    render() {\n            return (\n                <div>\n                    <div className=\"advice\">\n                        {this.props.advice.map(advice => <Advice advice={advice} key={advice.id} />)}\n                    </div>\n                </div>\n            )\n        }\n    \n}\n\nconst getInfo = (state) => {\n    return {\n        advice: state.allAdvice.advice\n    }\n}\n\nexport default connect(getInfo, { getAllAdvice})(AdviceContainer)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ChakraContainer from './components/ChakraContainer.js';\nimport Welcome from './components/Welcome.js';\nimport { Route, Switch } from 'react-router'\nimport NavBar from './components/Nav.js'\nimport { removeUser } from './redux/actions'\nimport { connect } from 'react-redux'\nimport QuizContainer from './components/QuizContainer';\nimport YogaContainer from './components/YogaContainer'\nimport AdviceContainer from './components/AdviceContainer'\n\nclass App extends React.Component{\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" render={() => <Welcome onClick={this.props.removeUser} />} />\n          <Route exact path=\"/chakras\" component={ChakraContainer} />\n          <Route exact path=\"/quiz\" component={QuizContainer} />\n          <Route exact path='/chakras/:id' component={ChakraContainer} />\n          <Route exact path='/yoga' component={YogaContainer} />\n          <Route exact path='/advice' component={AdviceContainer} />\n        </Switch>\n\n      </div>\n    )\n  }; \n}\n\n\nconst getInfo = (state) => {\n  return {\n    state\n  }\n}\n\nexport default connect(getInfo, {removeUser})(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    user: []\n  }\n  \n  const userReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"ADD_USER\":\n        return {\n          ...state,\n          user: action.payload\n        }\n      case \"CLEAR_USER\":\n        return {\n          ...state,\n          user: []\n        }\n      case \"UPDATE_USER\":\n        return {\n          user: \"this will update the user\"\n        }\n\n      default:\n        return state\n    }\n  }\n  \n  export default userReducer","const initialState = {\n    questions: []\n  }\n  \nconst questionReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case \"SET_QUESTIONS\":\n      return {\n        ...state,\n        questions: action.payload\n      }\n\n      case \"UPDATE_QUESTIONS\":\n        return {\n          ...state,\n          questions: action.payload\n        }\n\n      default:\n        return state\n    }\n  }\n  \n  export default questionReducer","const initialState = {\n    chakras: []\n  }\n  \nconst chakraReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_CHAKRAS\":\n      return {\n        ...state,\n        chakras: action.payload\n      }\n    \n    case \"SET_CHAKRA\":\n      return {\n        ...state,\n        chakra: action.payload\n      }\n      \n      default:\n        return state\n    }\n  }\n  \nexport default chakraReducer;","const initialState = {\n    poses: []\n  }\n  \nconst poseReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_POSES\":\n      return {\n        ...state,\n        poses: action.payload\n      }\n    \n      \n      default:\n        return state\n    }\n  }\n  \nexport default poseReducer;","const initialState = {\n    advice: []\n}\n\nconst adviceReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"SET_ADVICE\":\n            return {\n                ...state,\n                advice: action.payload\n            }\n        case \"UPDATE_ADVICE\":\n            return {\n                ...state,\n                advice: action.payload\n            }\n        \n        default:\n            return state\n    }\n}\n\nexport default adviceReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport userReducer from './redux/userReducer.js';\nimport questionsReducer from './redux/questionReducer.js';\nimport chakraReducer from './redux/chakraReducer.js';\nimport poseReducer from './redux/poseReducer.js';\nimport adviceReducer from './redux/adviceReducer.js';\n\n\nconst rootReducer = combineReducers({\n    currentUser: userReducer,\n    allQuestions: questionsReducer,\n    allChakras: chakraReducer,\n    allPoses: poseReducer,\n    allAdvice: adviceReducer\n})\n\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\n\n\nReactDOM.render(<Provider store={store}><Router><App /></Router></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}